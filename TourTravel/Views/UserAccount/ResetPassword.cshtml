@model TourTravel.Models.ResetPasswordModel
@{
    ViewData["Title"] = "Reset Your Password";
    ViewData["Page"] = "Reset Password";
}
@await Component.InvokeAsync("HeroSection")

<div class="login-area py-120">
    <div class="container">
        <div class="col-md-5 mx-auto">
            <div class="login-form">
                <div class="login-header text-center">
                    <img src="~/assets/img/logo/logo-dark.png" alt="">
                    <p>Reset your Travelox account password</p>
                </div>

                <!-- Messages -->
                @if (ViewBag.Error != null)
                {
                    <p class="text-danger">@ViewBag.Error</p>
                }
                @if (TempData["Message"] != null)
                {
                    <p class="text-success">@TempData["Message"]</p>
                }

                <!-- ✅ Reset Password Form -->
                <form asp-action="ResetPassword" method="post" id="resetForm" novalidate>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Email" value="@Model.Email" />
                    <input type="hidden" name="Token" value="@Model.Token" />

                    <!-- New Password -->
                    <div class="form-group position-relative mt-3">
                        <label>New Password</label>
                        <div class="input-group">
                            <input type="password" id="NewPassword" name="NewPassword" class="form-control unified-input"
                                   placeholder="Enter new password" required minlength="6" />
                            <button type="button" class="btn btn-outline-secondary toggle-password" data-target="#NewPassword">
                                <i class="far fa-eye"></i>
                            </button>
                        </div>
                        <small id="newPasswordError" class="text-danger" style="display:none;">
                            Password must be at least 6 characters.
                        </small>
                    </div>

                    <!-- Confirm Password -->
                    <div class="form-group position-relative mt-3">
                        <label>Confirm Password</label>
                        <div class="input-group">
                            <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control unified-input"
                                   placeholder="Confirm new password" required minlength="6" />
                            <button type="button" class="btn btn-outline-secondary toggle-password" data-target="#ConfirmPassword">
                                <i class="far fa-eye"></i>
                            </button>
                        </div>
                        <small id="passwordMatchError" class="text-danger" style="display:none;">
                            Passwords do not match.
                        </small>
                    </div>

                    <!-- ✅ Submit button with loader -->
                    <div class="d-flex align-items-center mt-4">
                        <button type="submit" id="resetBtn" class="login-btn w-100">
                            <span class="btn-text"><i class="far fa-key"></i> Update Password</span>
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- ✅ Scripts -->
@section Scripts {
    <script>
        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function () {
                const target = document.querySelector(this.dataset.target);
                const icon = this.querySelector('i');
                if (target.type === 'password') {
                    target.type = 'text';
                    icon.classList.replace('fa-eye', 'fa-eye-slash');
                } else {
                    target.type = 'password';
                    icon.classList.replace('fa-eye-slash', 'fa-eye');
                }
            });
        });

        // Form validation + loader logic
        document.getElementById("resetForm").addEventListener("submit", function (e) {
            const newPassword = document.getElementById("NewPassword").value.trim();
            const confirmPassword = document.getElementById("ConfirmPassword").value.trim();

            const matchError = document.getElementById("passwordMatchError");
            const lengthError = document.getElementById("newPasswordError");

            let valid = true;

            // Validate password length
            if (newPassword.length < 6) {
                lengthError.style.display = "block";
                valid = false;
            } else {
                lengthError.style.display = "none";
            }

            // Validate password match
            if (newPassword !== confirmPassword) {
                matchError.style.display = "block";
                valid = false;
            } else {
                matchError.style.display = "none";
            }

            // Prevent submission if invalid
            if (!valid) {
                e.preventDefault();
                return;
            }

            // ✅ Show loader when valid
            const button = document.getElementById('resetBtn');
            const spinner = button.querySelector('.spinner-border');
            const text = button.querySelector('.btn-text');

            button.disabled = true;
            text.classList.add('d-none');
            spinner.classList.remove('d-none');
        });
    </script>
}

<!-- ✅ Styles -->
<style>
    /* Unified input/button style */
    .input-group .unified-input {
        background-color: #fff;
        color: #000;
        border: 1px solid #ced4da;
        border-right: none;
        box-shadow: none;
    }

        .input-group .unified-input:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }

    .input-group .btn-outline-secondary {
        border: 1px solid #ced4da;
        border-left: none;
        color: #000;
        background-color: #fff;
    }

        .input-group .btn-outline-secondary:hover {
            background-color: #f8f9fa;
        }

    /* Loader inside button */
    .login-btn {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .spinner-border {
        width: 1.2rem;
        height: 1.2rem;
        border-width: 2px;
        color: #fff;
    }
</style>
